//项目的解释文档
npm init -y 生成package.json

npm i @types/node --save  :node的类型定义文件，使用类型定义文件的作用是使你能在typescript中使用已有的javascript的库
tsconfig.json：ts编译js的配置文件
{     //ctrl+shift+b 指定tsc按此配置文件编译文件
    "compilerOptions": {
        "target": "es5",   //编译目标
        "module": "commonjs",
        "emitDecoratorMetadata": true,
        "experimentalDecorators": true,
        "outDir": "./build",    //编译后的输出路径
        "rootDir": "./src",     //源代码
        "lib": [
            "es6"
        ]
    },
    "exclude": [
        "node_modules"
    ]
}

再次执行ctrl+shift+b对该文件进行编译，首次执行会提升缺少.vscode/tasks.json文件，创建它并继续执行ctrl+shift+b，
此时根据tsconfig.json的配置，会在build目录下生成编译后的javascript代码

npm install @types/express --save:express的类型定义文件(可以用typescript的代码来使用express的API)
配置npm 命令
 "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "server": "node ./build/app.js",   //express启动服务
    "tsc": "tsc"    //编译ts
  }

npm install -g nodemon npm install nodemon --save  安装nodemon 热更新服务
nodemon.json：热更新配置文件
{
    "restartable": "rs",   //设置重启模式
    "ignore": [    //指定忽略文件
        ".git",
        ".svn",
        "node_modules/**/node_modules"
    ],
    "verbose": true,   //设置日志输出模式，true 详细模式 
    "execMap": {    //设置运行服务的后缀名与对应的命令 
        "js": "node --harmony"
    },
    "watch": [   //watch-监听哪些文件的变化，当变化的时候自动重启 
 
    ],
    "env": {
        "NODE_ENV": "development"
    },
    "ext": "js json"    //ext-监控指定的后缀文件名
}
